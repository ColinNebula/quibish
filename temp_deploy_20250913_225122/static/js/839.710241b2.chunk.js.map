{"version":3,"file":"static/js/839.710241b2.chunk.js","mappings":"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","sources":["services/advancedGestureService.js","components/Media/EnhancedMediaViewer.js"],"sourcesContent":["/**\r\n * Advanced Touch Gesture Service\r\n * Handles multi-touch gestures, pinch-to-zoom, rotation, long-press, and accessibility\r\n */\r\n\r\nclass AdvancedTouchGestureService {\r\n  constructor() {\r\n    this.isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n    this.activeGestures = new Map();\r\n    this.gestureHistory = [];\r\n    this.longPressDelay = 500;\r\n    this.tapThreshold = 10;\r\n    this.swipeThreshold = 50;\r\n    this.pinchThreshold = 0.1;\r\n    this.rotationThreshold = 5; // degrees\r\n    \r\n    this.gestureStates = {\r\n      idle: 'idle',\r\n      touching: 'touching',\r\n      gesturing: 'gesturing',\r\n      pinching: 'pinching',\r\n      rotating: 'rotating',\r\n      swiping: 'swiping'\r\n    };\r\n    \r\n    this.currentState = this.gestureStates.idle;\r\n    this.gestureData = this.createGestureData();\r\n    \r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize the gesture service\r\n   */\r\n  init() {\r\n    if (!this.isTouch) {\r\n      console.log('👆 Touch not supported, gesture service disabled');\r\n      return;\r\n    }\r\n    \r\n    this.setupGestureListeners();\r\n    this.setupAccessibilityFeatures();\r\n    this.setupContextMenus();\r\n    \r\n    console.log('✋ Advanced Touch Gesture Service initialized');\r\n  }\r\n\r\n  /**\r\n   * Create initial gesture data structure\r\n   */\r\n  createGestureData() {\r\n    return {\r\n      touches: [],\r\n      startTime: 0,\r\n      lastTime: 0,\r\n      startCenter: { x: 0, y: 0 },\r\n      currentCenter: { x: 0, y: 0 },\r\n      startDistance: 0,\r\n      currentDistance: 0,\r\n      startAngle: 0,\r\n      currentAngle: 0,\r\n      scale: 1,\r\n      rotation: 0,\r\n      velocity: { x: 0, y: 0 },\r\n      direction: null,\r\n      target: null,\r\n      longPressTimer: null,\r\n      tapCount: 0,\r\n      lastTapTime: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Setup comprehensive gesture listeners\r\n   */\r\n  setupGestureListeners() {\r\n    // Touch start - initialize gesture tracking\r\n    document.addEventListener('touchstart', (e) => {\r\n      this.handleTouchStart(e);\r\n    }, { passive: false });\r\n\r\n    // Touch move - track gesture progress\r\n    document.addEventListener('touchmove', (e) => {\r\n      this.handleTouchMove(e);\r\n    }, { passive: false });\r\n\r\n    // Touch end - finalize gesture\r\n    document.addEventListener('touchend', (e) => {\r\n      this.handleTouchEnd(e);\r\n    }, { passive: false });\r\n\r\n    // Touch cancel - cleanup\r\n    document.addEventListener('touchcancel', (e) => {\r\n      this.handleTouchCancel(e);\r\n    }, { passive: false });\r\n  }\r\n\r\n  /**\r\n   * Handle touch start event\r\n   */\r\n  handleTouchStart(e) {\r\n    const now = performance.now();\r\n    this.gestureData.touches = Array.from(e.touches);\r\n    this.gestureData.startTime = now;\r\n    this.gestureData.lastTime = now;\r\n    this.gestureData.target = e.target;\r\n    \r\n    if (e.touches.length === 1) {\r\n      this.handleSingleTouchStart(e.touches[0], now);\r\n    } else if (e.touches.length === 2) {\r\n      this.handleMultiTouchStart(e.touches, now);\r\n    }\r\n    \r\n    this.currentState = this.gestureStates.touching;\r\n  }\r\n\r\n  /**\r\n   * Handle single touch start\r\n   */\r\n  handleSingleTouchStart(touch, timestamp) {\r\n    const { clientX: x, clientY: y } = touch;\r\n    \r\n    this.gestureData.startCenter = { x, y };\r\n    this.gestureData.currentCenter = { x, y };\r\n    \r\n    // Detect multi-tap\r\n    const timeSinceLastTap = timestamp - this.gestureData.lastTapTime;\r\n    if (timeSinceLastTap < 300) {\r\n      this.gestureData.tapCount++;\r\n    } else {\r\n      this.gestureData.tapCount = 1;\r\n    }\r\n    \r\n    // Setup long press detection\r\n    this.gestureData.longPressTimer = setTimeout(() => {\r\n      this.handleLongPress(touch);\r\n    }, this.longPressDelay);\r\n    \r\n    // Trigger touch feedback\r\n    this.triggerHapticFeedback('light');\r\n  }\r\n\r\n  /**\r\n   * Handle multi-touch start\r\n   */\r\n  handleMultiTouchStart(touches, timestamp) {\r\n    if (this.gestureData.longPressTimer) {\r\n      clearTimeout(this.gestureData.longPressTimer);\r\n      this.gestureData.longPressTimer = null;\r\n    }\r\n    \r\n    const center = this.calculateCenter(touches);\r\n    this.gestureData.startCenter = center;\r\n    this.gestureData.currentCenter = center;\r\n    \r\n    if (touches.length === 2) {\r\n      this.gestureData.startDistance = this.calculateDistance(touches[0], touches[1]);\r\n      this.gestureData.currentDistance = this.gestureData.startDistance;\r\n      this.gestureData.startAngle = this.calculateAngle(touches[0], touches[1]);\r\n      this.gestureData.currentAngle = this.gestureData.startAngle;\r\n    }\r\n    \r\n    this.currentState = this.gestureStates.gesturing;\r\n    this.triggerHapticFeedback('medium');\r\n  }\r\n\r\n  /**\r\n   * Handle touch move event\r\n   */\r\n  handleTouchMove(e) {\r\n    const now = performance.now();\r\n    const deltaTime = now - this.gestureData.lastTime;\r\n    \r\n    // Clear long press timer on movement\r\n    if (this.gestureData.longPressTimer) {\r\n      clearTimeout(this.gestureData.longPressTimer);\r\n      this.gestureData.longPressTimer = null;\r\n    }\r\n    \r\n    this.gestureData.touches = Array.from(e.touches);\r\n    this.gestureData.lastTime = now;\r\n    \r\n    if (e.touches.length === 1) {\r\n      this.handleSingleTouchMove(e.touches[0], deltaTime);\r\n    } else if (e.touches.length === 2) {\r\n      this.handleMultiTouchMove(e.touches, deltaTime);\r\n    }\r\n    \r\n    // Prevent default browser gestures for media elements\r\n    const target = this.gestureData.target;\r\n    if (target && (target.tagName === 'IMG' || target.tagName === 'VIDEO' || \r\n                   target.closest('.zoomable') || target.closest('.media-viewer'))) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle single touch move\r\n   */\r\n  handleSingleTouchMove(touch, deltaTime) {\r\n    const { clientX: x, clientY: y } = touch;\r\n    const oldCenter = this.gestureData.currentCenter;\r\n    \r\n    this.gestureData.currentCenter = { x, y };\r\n    \r\n    // Calculate velocity\r\n    if (deltaTime > 0) {\r\n      this.gestureData.velocity = {\r\n        x: (x - oldCenter.x) / deltaTime,\r\n        y: (y - oldCenter.y) / deltaTime\r\n      };\r\n    }\r\n    \r\n    // Detect swipe\r\n    const deltaX = x - this.gestureData.startCenter.x;\r\n    const deltaY = y - this.gestureData.startCenter.y;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    \r\n    if (distance > this.swipeThreshold && this.currentState !== this.gestureStates.swiping) {\r\n      this.currentState = this.gestureStates.swiping;\r\n      this.gestureData.direction = this.calculateDirection(deltaX, deltaY);\r\n      \r\n      this.triggerGestureEvent('swipestart', {\r\n        direction: this.gestureData.direction,\r\n        distance,\r\n        velocity: this.gestureData.velocity,\r\n        target: this.gestureData.target\r\n      });\r\n    }\r\n    \r\n    if (this.currentState === this.gestureStates.swiping) {\r\n      this.triggerGestureEvent('swipemove', {\r\n        direction: this.gestureData.direction,\r\n        distance,\r\n        deltaX,\r\n        deltaY,\r\n        velocity: this.gestureData.velocity,\r\n        target: this.gestureData.target\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle multi-touch move\r\n   */\r\n  handleMultiTouchMove(touches, deltaTime) {\r\n    if (touches.length !== 2) return;\r\n    \r\n    const center = this.calculateCenter(touches);\r\n    const distance = this.calculateDistance(touches[0], touches[1]);\r\n    const angle = this.calculateAngle(touches[0], touches[1]);\r\n    \r\n    this.gestureData.currentCenter = center;\r\n    this.gestureData.currentDistance = distance;\r\n    this.gestureData.currentAngle = angle;\r\n    \r\n    // Calculate scale change\r\n    const scaleChange = distance / this.gestureData.startDistance;\r\n    this.gestureData.scale = scaleChange;\r\n    \r\n    // Calculate rotation change\r\n    const rotationChange = angle - this.gestureData.startAngle;\r\n    this.gestureData.rotation = rotationChange;\r\n    \r\n    // Detect pinch gesture\r\n    if (Math.abs(scaleChange - 1) > this.pinchThreshold) {\r\n      if (this.currentState !== this.gestureStates.pinching) {\r\n        this.currentState = this.gestureStates.pinching;\r\n        this.triggerGestureEvent('pinchstart', {\r\n          scale: scaleChange,\r\n          center,\r\n          target: this.gestureData.target\r\n        });\r\n      }\r\n      \r\n      this.triggerGestureEvent('pinchmove', {\r\n        scale: scaleChange,\r\n        delta: scaleChange - 1,\r\n        center,\r\n        target: this.gestureData.target\r\n      });\r\n    }\r\n    \r\n    // Detect rotation gesture\r\n    if (Math.abs(rotationChange) > this.rotationThreshold) {\r\n      if (this.currentState !== this.gestureStates.rotating) {\r\n        this.currentState = this.gestureStates.rotating;\r\n        this.triggerGestureEvent('rotatestart', {\r\n          rotation: rotationChange,\r\n          center,\r\n          target: this.gestureData.target\r\n        });\r\n      }\r\n      \r\n      this.triggerGestureEvent('rotatemove', {\r\n        rotation: rotationChange,\r\n        delta: rotationChange,\r\n        center,\r\n        target: this.gestureData.target\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch end event\r\n   */\r\n  handleTouchEnd(e) {\r\n    const now = performance.now();\r\n    const duration = now - this.gestureData.startTime;\r\n    \r\n    // Clear long press timer\r\n    if (this.gestureData.longPressTimer) {\r\n      clearTimeout(this.gestureData.longPressTimer);\r\n      this.gestureData.longPressTimer = null;\r\n    }\r\n    \r\n    // Handle gesture completion based on current state\r\n    switch (this.currentState) {\r\n      case this.gestureStates.touching:\r\n        this.handleTap(duration);\r\n        break;\r\n      case this.gestureStates.swiping:\r\n        this.handleSwipeEnd(duration);\r\n        break;\r\n      case this.gestureStates.pinching:\r\n        this.handlePinchEnd();\r\n        break;\r\n      case this.gestureStates.rotating:\r\n        this.handleRotateEnd();\r\n        break;\r\n    }\r\n    \r\n    // Reset state if no touches remain\r\n    if (e.touches.length === 0) {\r\n      this.resetGestureState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle tap gesture\r\n   */\r\n  handleTap(duration) {\r\n    const distance = this.calculateDistance(\r\n      this.gestureData.startCenter,\r\n      this.gestureData.currentCenter\r\n    );\r\n    \r\n    if (distance <= this.tapThreshold && duration < 500) {\r\n      this.gestureData.lastTapTime = performance.now();\r\n      \r\n      const eventData = {\r\n        tapCount: this.gestureData.tapCount,\r\n        position: this.gestureData.currentCenter,\r\n        target: this.gestureData.target,\r\n        duration\r\n      };\r\n      \r\n      if (this.gestureData.tapCount === 1) {\r\n        setTimeout(() => {\r\n          if (this.gestureData.tapCount === 1) {\r\n            this.triggerGestureEvent('tap', eventData);\r\n          }\r\n        }, 250); // Wait for potential double tap\r\n      } else if (this.gestureData.tapCount === 2) {\r\n        this.triggerGestureEvent('doubletap', eventData);\r\n      } else if (this.gestureData.tapCount >= 3) {\r\n        this.triggerGestureEvent('multitap', eventData);\r\n      }\r\n      \r\n      this.triggerHapticFeedback('light');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle swipe end\r\n   */\r\n  handleSwipeEnd(duration) {\r\n    const deltaX = this.gestureData.currentCenter.x - this.gestureData.startCenter.x;\r\n    const deltaY = this.gestureData.currentCenter.y - this.gestureData.startCenter.y;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    \r\n    this.triggerGestureEvent('swipeend', {\r\n      direction: this.gestureData.direction,\r\n      distance,\r\n      duration,\r\n      velocity: this.gestureData.velocity,\r\n      deltaX,\r\n      deltaY,\r\n      target: this.gestureData.target\r\n    });\r\n    \r\n    this.triggerHapticFeedback('medium');\r\n  }\r\n\r\n  /**\r\n   * Handle pinch end\r\n   */\r\n  handlePinchEnd() {\r\n    this.triggerGestureEvent('pinchend', {\r\n      scale: this.gestureData.scale,\r\n      finalScale: this.gestureData.scale,\r\n      center: this.gestureData.currentCenter,\r\n      target: this.gestureData.target\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle rotation end\r\n   */\r\n  handleRotateEnd() {\r\n    this.triggerGestureEvent('rotateend', {\r\n      rotation: this.gestureData.rotation,\r\n      finalRotation: this.gestureData.rotation,\r\n      center: this.gestureData.currentCenter,\r\n      target: this.gestureData.target\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle long press\r\n   */\r\n  handleLongPress(touch) {\r\n    this.triggerGestureEvent('longpress', {\r\n      position: { x: touch.clientX, y: touch.clientY },\r\n      target: this.gestureData.target,\r\n      duration: this.longPressDelay\r\n    });\r\n    \r\n    this.triggerHapticFeedback('heavy');\r\n    this.showContextMenu(touch);\r\n  }\r\n\r\n  /**\r\n   * Handle touch cancel\r\n   */\r\n  handleTouchCancel(e) {\r\n    this.resetGestureState();\r\n  }\r\n\r\n  /**\r\n   * Reset gesture state\r\n   */\r\n  resetGestureState() {\r\n    if (this.gestureData.longPressTimer) {\r\n      clearTimeout(this.gestureData.longPressTimer);\r\n    }\r\n    \r\n    this.currentState = this.gestureStates.idle;\r\n    this.gestureData = this.createGestureData();\r\n  }\r\n\r\n  /**\r\n   * Setup accessibility features\r\n   */\r\n  setupAccessibilityFeatures() {\r\n    // Enhanced focus management for touch devices\r\n    document.addEventListener('focusin', (e) => {\r\n      if (this.isTouch) {\r\n        e.target.classList.add('touch-focused');\r\n      }\r\n    });\r\n    \r\n    document.addEventListener('focusout', (e) => {\r\n      e.target.classList.remove('touch-focused');\r\n    });\r\n    \r\n    // Voice over support for gestures\r\n    document.addEventListener('gesturestart', (e) => {\r\n      if (window.speechSynthesis) {\r\n        const announcement = this.createGestureAnnouncement(e.detail);\r\n        if (announcement) {\r\n          this.announceGesture(announcement);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup context menus for long press\r\n   */\r\n  setupContextMenus() {\r\n    this.contextMenus = new Map();\r\n    \r\n    // Default context menu for images\r\n    this.registerContextMenu('img', [\r\n      { label: 'View Full Size', action: 'viewFullSize' },\r\n      { label: 'Download', action: 'download' },\r\n      { label: 'Share', action: 'share' }\r\n    ]);\r\n    \r\n    // Default context menu for text\r\n    this.registerContextMenu('[data-text-selectable]', [\r\n      { label: 'Copy', action: 'copy' },\r\n      { label: 'Select All', action: 'selectAll' },\r\n      { label: 'Share', action: 'share' }\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Register context menu for element selector\r\n   */\r\n  registerContextMenu(selector, items) {\r\n    this.contextMenus.set(selector, items);\r\n  }\r\n\r\n  /**\r\n   * Show context menu\r\n   */\r\n  showContextMenu(touch) {\r\n    const target = this.gestureData.target;\r\n    let menuItems = null;\r\n    \r\n    // Find matching context menu\r\n    for (const [selector, items] of this.contextMenus) {\r\n      if (target.matches && target.matches(selector)) {\r\n        menuItems = items;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (menuItems) {\r\n      this.triggerGestureEvent('contextmenu', {\r\n        position: { x: touch.clientX, y: touch.clientY },\r\n        target,\r\n        items: menuItems\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility: Calculate distance between two points\r\n   */\r\n  calculateDistance(point1, point2) {\r\n    const dx = point2.x - point1.x;\r\n    const dy = point2.y - point1.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * Utility: Calculate center point of touches\r\n   */\r\n  calculateCenter(touches) {\r\n    let x = 0, y = 0;\r\n    for (const touch of touches) {\r\n      x += touch.clientX;\r\n      y += touch.clientY;\r\n    }\r\n    return { x: x / touches.length, y: y / touches.length };\r\n  }\r\n\r\n  /**\r\n   * Utility: Calculate angle between two touches\r\n   */\r\n  calculateAngle(touch1, touch2) {\r\n    return Math.atan2(touch2.clientY - touch1.clientY, touch2.clientX - touch1.clientX) * 180 / Math.PI;\r\n  }\r\n\r\n  /**\r\n   * Utility: Calculate swipe direction\r\n   */\r\n  calculateDirection(deltaX, deltaY) {\r\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\r\n      return deltaX > 0 ? 'right' : 'left';\r\n    } else {\r\n      return deltaY > 0 ? 'down' : 'up';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger haptic feedback\r\n   */\r\n  triggerHapticFeedback(intensity = 'light') {\r\n    if (!navigator.vibrate) return;\r\n    \r\n    const patterns = {\r\n      light: [10],\r\n      medium: [50],\r\n      heavy: [100]\r\n    };\r\n    \r\n    navigator.vibrate(patterns[intensity] || patterns.light);\r\n  }\r\n\r\n  /**\r\n   * Trigger gesture event\r\n   */\r\n  triggerGestureEvent(type, detail) {\r\n    const event = new CustomEvent(`gesture${type}`, {\r\n      detail: { ...detail, timestamp: performance.now() }\r\n    });\r\n    \r\n    if (detail.target) {\r\n      detail.target.dispatchEvent(event);\r\n    }\r\n    \r\n    document.dispatchEvent(event);\r\n    \r\n    // Store in gesture history\r\n    this.gestureHistory.push({\r\n      type,\r\n      detail,\r\n      timestamp: performance.now()\r\n    });\r\n    \r\n    // Limit history size\r\n    if (this.gestureHistory.length > 100) {\r\n      this.gestureHistory.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create gesture announcement for accessibility\r\n   */\r\n  createGestureAnnouncement(gestureDetail) {\r\n    const { type } = gestureDetail;\r\n    \r\n    const announcements = {\r\n      'tap': 'Button activated',\r\n      'doubletap': 'Double tap detected',\r\n      'longpress': 'Context menu available',\r\n      'swipe': `Swiped ${gestureDetail.direction}`,\r\n      'pinch': 'Zoom gesture detected',\r\n      'rotate': 'Rotation gesture detected'\r\n    };\r\n    \r\n    return announcements[type];\r\n  }\r\n\r\n  /**\r\n   * Announce gesture for screen readers\r\n   */\r\n  announceGesture(text) {\r\n    if (window.speechSynthesis) {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.volume = 0.3;\r\n      utterance.rate = 1.2;\r\n      window.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get gesture analytics\r\n   */\r\n  getGestureAnalytics() {\r\n    const recentGestures = this.gestureHistory.slice(-50);\r\n    const gestureTypes = {};\r\n    \r\n    recentGestures.forEach(gesture => {\r\n      gestureTypes[gesture.type] = (gestureTypes[gesture.type] || 0) + 1;\r\n    });\r\n    \r\n    return {\r\n      totalGestures: this.gestureHistory.length,\r\n      recentGestures: recentGestures.length,\r\n      gestureTypes,\r\n      currentState: this.currentState\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enable/disable gesture detection\r\n   */\r\n  setEnabled(enabled) {\r\n    this.enabled = enabled;\r\n    \r\n    if (!enabled) {\r\n      this.resetGestureState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy the service\r\n   */\r\n  destroy() {\r\n    this.resetGestureState();\r\n    this.gestureHistory = [];\r\n    this.activeGestures.clear();\r\n    this.contextMenus.clear();\r\n  }\r\n}\r\n\r\n// CSS for gesture feedback\r\nconst gestureCSS = `\r\n/* Gesture Feedback Styles */\r\n.touch-focused {\r\n  outline: 2px solid #3b82f6;\r\n  outline-offset: 2px;\r\n}\r\n\r\n.touch-active {\r\n  transform: scale(0.95);\r\n  transition: transform 0.1s ease;\r\n}\r\n\r\n.gesture-target {\r\n  touch-action: manipulation;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n}\r\n\r\n.zoomable {\r\n  touch-action: pan-x pan-y;\r\n  cursor: grab;\r\n}\r\n\r\n.zoomable.zoomed {\r\n  cursor: grabbing;\r\n}\r\n\r\n.swipeable {\r\n  touch-action: pan-y;\r\n}\r\n\r\n.no-touch-action {\r\n  touch-action: none;\r\n}\r\n\r\n/* Context menu styles */\r\n.gesture-context-menu {\r\n  position: fixed;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  padding: 8px 0;\r\n  z-index: 10000;\r\n  min-width: 150px;\r\n}\r\n\r\n.gesture-context-menu-item {\r\n  padding: 12px 16px;\r\n  cursor: pointer;\r\n  border: none;\r\n  background: none;\r\n  width: 100%;\r\n  text-align: left;\r\n  font-size: 14px;\r\n}\r\n\r\n.gesture-context-menu-item:hover {\r\n  background: #f3f4f6;\r\n}\r\n\r\n/* Accessibility improvements */\r\n@media (prefers-reduced-motion: reduce) {\r\n  .touch-active {\r\n    transform: none;\r\n    transition: none;\r\n  }\r\n}\r\n\r\n/* High contrast mode */\r\n@media (prefers-contrast: high) {\r\n  .touch-focused {\r\n    outline-color: HighlightText;\r\n    outline-width: 3px;\r\n  }\r\n}\r\n`;\r\n\r\n// Inject CSS\r\nfunction injectGestureStyles() {\r\n  const styleElement = document.createElement('style');\r\n  styleElement.textContent = gestureCSS;\r\n  document.head.appendChild(styleElement);\r\n}\r\n\r\n// Auto-initialize\r\nif (typeof document !== 'undefined') {\r\n  injectGestureStyles();\r\n}\r\n\r\n// Create singleton instance\r\nconst advancedGestureService = new AdvancedTouchGestureService();\r\n\r\nexport default advancedGestureService;\r\nexport { AdvancedTouchGestureService };","/**\r\n * Enhanced Media Viewer with Gesture Support\r\n * Supports pinch-to-zoom, rotation, swipe navigation, and accessibility\r\n */\r\n\r\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport advancedGestureService from '../../services/advancedGestureService';\r\n\r\nconst EnhancedMediaViewer = ({\r\n  media = [],\r\n  currentIndex = 0,\r\n  isOpen = false,\r\n  onClose = () => {},\r\n  onNavigate = () => {},\r\n  showControls = true,\r\n  autoPlay = false,\r\n  enableGestures = true\r\n}) => {\r\n  const [viewerState, setViewerState] = useState({\r\n    scale: 1,\r\n    rotation: 0,\r\n    translateX: 0,\r\n    translateY: 0,\r\n    isDragging: false,\r\n    isZoomed: false\r\n  });\r\n  \r\n  const [currentMediaIndex, setCurrentMediaIndex] = useState(currentIndex);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const mediaRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const gestureStartRef = useRef({});\r\n  const animationRef = useRef(null);\r\n  \r\n  const currentMedia = media[currentMediaIndex];\r\n  const isVideo = currentMedia?.type?.startsWith('video/');\r\n  const isImage = currentMedia?.type?.startsWith('image/');\r\n\r\n  /**\r\n   * Initialize gesture handling\r\n   */\r\n  useEffect(() => {\r\n    if (!enableGestures || !containerRef.current) return;\r\n\r\n    const container = containerRef.current;\r\n    \r\n    // Setup gesture event listeners\r\n    const handlePinchStart = (e) => {\r\n      if (!isImage) return;\r\n      \r\n      gestureStartRef.current = {\r\n        scale: viewerState.scale,\r\n        rotation: viewerState.rotation,\r\n        translateX: viewerState.translateX,\r\n        translateY: viewerState.translateY\r\n      };\r\n      \r\n      setViewerState(prev => ({\r\n        ...prev,\r\n        isDragging: true\r\n      }));\r\n    };\r\n\r\n    const handlePinchMove = (e) => {\r\n      if (!isImage || !gestureStartRef.current) return;\r\n      \r\n      const { scale, center } = e.detail;\r\n      const newScale = Math.max(0.5, Math.min(5, gestureStartRef.current.scale * scale));\r\n      \r\n      setViewerState(prev => ({\r\n        ...prev,\r\n        scale: newScale,\r\n        isZoomed: newScale > 1\r\n      }));\r\n    };\r\n\r\n    const handlePinchEnd = (e) => {\r\n      if (!isImage) return;\r\n      \r\n      setViewerState(prev => ({\r\n        ...prev,\r\n        isDragging: false\r\n      }));\r\n      \r\n      // Snap to reasonable scale values\r\n      const { scale } = viewerState;\r\n      let snapScale = scale;\r\n      \r\n      if (scale < 0.8) {\r\n        snapScale = 1;\r\n      } else if (scale > 4) {\r\n        snapScale = 4;\r\n      }\r\n      \r\n      if (snapScale !== scale) {\r\n        animateToScale(snapScale);\r\n      }\r\n    };\r\n\r\n    const handleRotateMove = (e) => {\r\n      if (!isImage) return;\r\n      \r\n      const { rotation } = e.detail;\r\n      setViewerState(prev => ({\r\n        ...prev,\r\n        rotation: gestureStartRef.current.rotation + rotation\r\n      }));\r\n    };\r\n\r\n    const handleDoubleTap = (e) => {\r\n      if (!isImage) return;\r\n      \r\n      const { scale, isZoomed } = viewerState;\r\n      const targetScale = isZoomed ? 1 : 2.5;\r\n      \r\n      animateToScale(targetScale);\r\n    };\r\n\r\n    const handleSwipeEnd = (e) => {\r\n      const { direction, distance, velocity } = e.detail;\r\n      \r\n      // Navigation swipes (only when not zoomed)\r\n      if (!viewerState.isZoomed && distance > 100) {\r\n        if (direction === 'left' && currentMediaIndex < media.length - 1) {\r\n          navigateMedia(1);\r\n        } else if (direction === 'right' && currentMediaIndex > 0) {\r\n          navigateMedia(-1);\r\n        }\r\n      }\r\n      \r\n      // Close on swipe down\r\n      if (direction === 'down' && distance > 150) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    const handleLongPress = (e) => {\r\n      // Show media info or context menu\r\n      showMediaInfo();\r\n    };\r\n\r\n    // Add event listeners\r\n    container.addEventListener('gesturepinchstart', handlePinchStart);\r\n    container.addEventListener('gesturepinchmove', handlePinchMove);\r\n    container.addEventListener('gesturepinchend', handlePinchEnd);\r\n    container.addEventListener('gesturerotatemove', handleRotateMove);\r\n    container.addEventListener('gesturedoubletap', handleDoubleTap);\r\n    container.addEventListener('gestureswipeend', handleSwipeEnd);\r\n    container.addEventListener('gesturelongpress', handleLongPress);\r\n\r\n    return () => {\r\n      container.removeEventListener('gesturepinchstart', handlePinchStart);\r\n      container.removeEventListener('gesturepinchmove', handlePinchMove);\r\n      container.removeEventListener('gesturepinchend', handlePinchEnd);\r\n      container.removeEventListener('gesturerotatemove', handleRotateMove);\r\n      container.removeEventListener('gesturedoubletap', handleDoubleTap);\r\n      container.removeEventListener('gestureswipeend', handleSwipeEnd);\r\n      container.removeEventListener('gesturelongpress', handleLongPress);\r\n    };\r\n  }, [enableGestures, viewerState, currentMediaIndex, media.length, isImage]);\r\n\r\n  /**\r\n   * Reset viewer state when media changes\r\n   */\r\n  useEffect(() => {\r\n    setViewerState({\r\n      scale: 1,\r\n      rotation: 0,\r\n      translateX: 0,\r\n      translateY: 0,\r\n      isDragging: false,\r\n      isZoomed: false\r\n    });\r\n    setError(null);\r\n  }, [currentMediaIndex]);\r\n\r\n  /**\r\n   * Update current index when prop changes\r\n   */\r\n  useEffect(() => {\r\n    setCurrentMediaIndex(currentIndex);\r\n  }, [currentIndex]);\r\n\r\n  /**\r\n   * Animate to target scale\r\n   */\r\n  const animateToScale = useCallback((targetScale, duration = 300) => {\r\n    const startScale = viewerState.scale;\r\n    const startTime = performance.now();\r\n    \r\n    const animate = (currentTime) => {\r\n      const elapsed = currentTime - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // Easing function\r\n      const easeProgress = 1 - Math.pow(1 - progress, 3);\r\n      \r\n      const currentScale = startScale + (targetScale - startScale) * easeProgress;\r\n      \r\n      setViewerState(prev => ({\r\n        ...prev,\r\n        scale: currentScale,\r\n        isZoomed: currentScale > 1\r\n      }));\r\n      \r\n      if (progress < 1) {\r\n        animationRef.current = requestAnimationFrame(animate);\r\n      }\r\n    };\r\n    \r\n    if (animationRef.current) {\r\n      cancelAnimationFrame(animationRef.current);\r\n    }\r\n    \r\n    animationRef.current = requestAnimationFrame(animate);\r\n  }, [viewerState.scale]);\r\n\r\n  /**\r\n   * Navigate between media items\r\n   */\r\n  const navigateMedia = useCallback((direction) => {\r\n    const newIndex = currentMediaIndex + direction;\r\n    \r\n    if (newIndex >= 0 && newIndex < media.length) {\r\n      setCurrentMediaIndex(newIndex);\r\n      onNavigate(newIndex);\r\n    }\r\n  }, [currentMediaIndex, media.length, onNavigate]);\r\n\r\n  /**\r\n   * Handle keyboard navigation\r\n   */\r\n  useEffect(() => {\r\n    if (!isOpen) return;\r\n\r\n    const handleKeyDown = (e) => {\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          onClose();\r\n          break;\r\n        case 'ArrowLeft':\r\n          navigateMedia(-1);\r\n          break;\r\n        case 'ArrowRight':\r\n          navigateMedia(1);\r\n          break;\r\n        case '+':\r\n        case '=':\r\n          animateToScale(Math.min(viewerState.scale * 1.2, 5));\r\n          break;\r\n        case '-':\r\n          animateToScale(Math.max(viewerState.scale * 0.8, 0.5));\r\n          break;\r\n        case '0':\r\n          animateToScale(1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [isOpen, onClose, navigateMedia, viewerState.scale, animateToScale]);\r\n\r\n  /**\r\n   * Show media information\r\n   */\r\n  const showMediaInfo = useCallback(() => {\r\n    // Implementation for showing media metadata\r\n    console.log('Media info:', currentMedia);\r\n  }, [currentMedia]);\r\n\r\n  /**\r\n   * Handle media load error\r\n   */\r\n  const handleMediaError = useCallback(() => {\r\n    setError('Failed to load media');\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  /**\r\n   * Handle media load success\r\n   */\r\n  const handleMediaLoad = useCallback(() => {\r\n    setIsLoading(false);\r\n    setError(null);\r\n  }, []);\r\n\r\n  /**\r\n   * Get transform style for media\r\n   */\r\n  const getMediaTransform = useCallback(() => {\r\n    const { scale, rotation, translateX, translateY } = viewerState;\r\n    \r\n    return {\r\n      transform: `scale(${scale}) rotate(${rotation}deg) translate(${translateX}px, ${translateY}px)`,\r\n      transformOrigin: 'center center',\r\n      transition: viewerState.isDragging ? 'none' : 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\r\n    };\r\n  }, [viewerState]);\r\n\r\n  if (!isOpen || !currentMedia) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"enhanced-media-viewer\"\r\n      ref={containerRef}\r\n      data-media-viewer=\"true\"\r\n      aria-label=\"Media viewer\"\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n    >\r\n      {/* Backdrop */}\r\n      <div \r\n        className=\"media-viewer-backdrop\"\r\n        onClick={onClose}\r\n        aria-hidden=\"true\"\r\n      />\r\n\r\n      {/* Media Container */}\r\n      <div className=\"media-viewer-content\">\r\n        {/* Loading State */}\r\n        {isLoading && (\r\n          <div className=\"media-viewer-loading\">\r\n            <div className=\"loading-spinner\" />\r\n            <p>Loading media...</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Error State */}\r\n        {error && (\r\n          <div className=\"media-viewer-error\">\r\n            <div className=\"error-icon\">⚠️</div>\r\n            <p>{error}</p>\r\n            <button onClick={() => setError(null)}>Retry</button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Media Display */}\r\n        {!error && (\r\n          <div className=\"media-display-container\">\r\n            {isImage && (\r\n              <img\r\n                ref={mediaRef}\r\n                src={currentMedia.url}\r\n                alt={currentMedia.alt || 'Media'}\r\n                className={`media-image ${viewerState.isZoomed ? 'zoomed' : ''}`}\r\n                style={getMediaTransform()}\r\n                onLoad={handleMediaLoad}\r\n                onError={handleMediaError}\r\n                draggable={false}\r\n              />\r\n            )}\r\n\r\n            {isVideo && (\r\n              <video\r\n                ref={mediaRef}\r\n                src={currentMedia.url}\r\n                className=\"media-video\"\r\n                controls\r\n                autoPlay={autoPlay}\r\n                onLoadedData={handleMediaLoad}\r\n                onError={handleMediaError}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Controls */}\r\n        {showControls && (\r\n          <div className=\"media-viewer-controls\">\r\n            {/* Close Button */}\r\n            <button\r\n              className=\"control-button close-button\"\r\n              onClick={onClose}\r\n              aria-label=\"Close viewer\"\r\n            >\r\n              ✕\r\n            </button>\r\n\r\n            {/* Navigation */}\r\n            {media.length > 1 && (\r\n              <>\r\n                <button\r\n                  className=\"control-button nav-button prev-button\"\r\n                  onClick={() => navigateMedia(-1)}\r\n                  disabled={currentMediaIndex === 0}\r\n                  aria-label=\"Previous media\"\r\n                >\r\n                  ←\r\n                </button>\r\n                <button\r\n                  className=\"control-button nav-button next-button\"\r\n                  onClick={() => navigateMedia(1)}\r\n                  disabled={currentMediaIndex === media.length - 1}\r\n                  aria-label=\"Next media\"\r\n                >\r\n                  →\r\n                </button>\r\n              </>\r\n            )}\r\n\r\n            {/* Zoom Controls for Images */}\r\n            {isImage && (\r\n              <div className=\"zoom-controls\">\r\n                <button\r\n                  className=\"control-button zoom-button\"\r\n                  onClick={() => animateToScale(Math.max(viewerState.scale * 0.8, 0.5))}\r\n                  aria-label=\"Zoom out\"\r\n                >\r\n                  −\r\n                </button>\r\n                <span className=\"zoom-level\">\r\n                  {Math.round(viewerState.scale * 100)}%\r\n                </span>\r\n                <button\r\n                  className=\"control-button zoom-button\"\r\n                  onClick={() => animateToScale(Math.min(viewerState.scale * 1.2, 5))}\r\n                  aria-label=\"Zoom in\"\r\n                >\r\n                  +\r\n                </button>\r\n                <button\r\n                  className=\"control-button reset-button\"\r\n                  onClick={() => animateToScale(1)}\r\n                  aria-label=\"Reset zoom\"\r\n                >\r\n                  Reset\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Media Info */}\r\n        <div className=\"media-viewer-info\">\r\n          <span className=\"media-counter\">\r\n            {currentMediaIndex + 1} of {media.length}\r\n          </span>\r\n          {currentMedia.name && (\r\n            <span className=\"media-name\">{currentMedia.name}</span>\r\n          )}\r\n        </div>\r\n\r\n        {/* Gesture Hints */}\r\n        {enableGestures && isImage && (\r\n          <div className=\"gesture-hints\">\r\n            <p>💡 Double tap to zoom • Pinch to zoom • Swipe to navigate</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedMediaViewer;"],"names":["document","styleElement","createElement","textContent","head","appendChild","injectGestureStyles","constructor","this","isTouch","window","navigator","maxTouchPoints","activeGestures","Map","gestureHistory","longPressDelay","tapThreshold","swipeThreshold","pinchThreshold","rotationThreshold","gestureStates","idle","touching","gesturing","pinching","rotating","swiping","currentState","gestureData","createGestureData","init","setupGestureListeners","setupAccessibilityFeatures","setupContextMenus","console","log","touches","startTime","lastTime","startCenter","x","y","currentCenter","startDistance","currentDistance","startAngle","currentAngle","scale","rotation","velocity","direction","target","longPressTimer","tapCount","lastTapTime","addEventListener","e","handleTouchStart","passive","handleTouchMove","handleTouchEnd","handleTouchCancel","now","performance","Array","from","length","handleSingleTouchStart","handleMultiTouchStart","touch","timestamp","clientX","clientY","setTimeout","handleLongPress","triggerHapticFeedback","clearTimeout","center","calculateCenter","calculateDistance","calculateAngle","deltaTime","handleSingleTouchMove","handleMultiTouchMove","tagName","closest","preventDefault","oldCenter","deltaX","deltaY","distance","Math","sqrt","calculateDirection","triggerGestureEvent","angle","scaleChange","rotationChange","abs","delta","duration","handleTap","handleSwipeEnd","handlePinchEnd","handleRotateEnd","resetGestureState","eventData","position","finalScale","finalRotation","showContextMenu","classList","add","remove","speechSynthesis","announcement","createGestureAnnouncement","detail","announceGesture","contextMenus","registerContextMenu","label","action","selector","items","set","menuItems","matches","point1","point2","dx","dy","touch1","touch2","atan2","PI","intensity","arguments","undefined","vibrate","patterns","light","medium","heavy","type","event","CustomEvent","concat","_objectSpread","dispatchEvent","push","shift","gestureDetail","text","utterance","SpeechSynthesisUtterance","volume","rate","speak","getGestureAnalytics","recentGestures","slice","gestureTypes","forEach","gesture","totalGestures","setEnabled","enabled","destroy","clear","_ref","_currentMedia$type","_currentMedia$type2","media","currentIndex","isOpen","onClose","onNavigate","showControls","autoPlay","enableGestures","viewerState","setViewerState","useState","translateX","translateY","isDragging","isZoomed","currentMediaIndex","setCurrentMediaIndex","isLoading","setIsLoading","error","setError","mediaRef","useRef","containerRef","gestureStartRef","animationRef","currentMedia","isVideo","startsWith","isImage","useEffect","current","container","handlePinchStart","prev","handlePinchMove","newScale","max","min","snapScale","animateToScale","handleRotateMove","handleDoubleTap","navigateMedia","showMediaInfo","removeEventListener","useCallback","targetScale","startScale","animate","currentTime","elapsed","progress","easeProgress","pow","currentScale","requestAnimationFrame","cancelAnimationFrame","newIndex","handleKeyDown","key","handleMediaError","handleMediaLoad","getMediaTransform","transform","transformOrigin","transition","_jsxs","className","ref","role","children","_jsx","onClick","src","url","alt","style","onLoad","onError","draggable","controls","onLoadedData","_Fragment","disabled","round","name"],"sourceRoot":""}