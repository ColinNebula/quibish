
import React, { useState, useEffect, Suspense } from 'react';
import './App.css';
import './AppProfessional.css';

// Core components
import Home from './components/Home';
import Login from './components/Login';
import Register from './components/Register';

// UI components
import AppHeader from './components/UI/AppHeade                {isAuthenticated && user && !authLoading ? (
                  <Home 
                    user={user}
                    onLogout={handleLogout} 
                  />
                ) : ( AppFooter from './components/UI/AppFooter';
import LoadingSpinner from './components/UI/LoadingSpinner';
import DynamicSplashScreen from './components/UI/DynamicSplashScreen';
import WhatsNewModal from './components/UI/WhatsNewModal';
import SearchDemo from './components/UI/SearchDemo';
import DemoMenu from './components/UI/DemoMenu';
import ErrorBoundary from './components/ErrorHandling/ErrorBoundary';

// Context providers
import { useAuth } from './context/AuthContext';

// Connection monitoring
import ConnectionStatus from './components/ConnectionStatus/ConnectionStatus';
import { getConnectionManager } from './services/EnhancedConnectionManager';

// Services
import { loadUserProfile, saveUserProfile } from './components/Home/UserProfileService';
import { initPresenceTracking, updateLastActive } from './components/Home/UserPresenceService';
import { logActivity, ACTIVITY_TYPES } from './components/Home/UserActivityService';
import { APP_VERSION, isNewVersion, saveCurrentVersion } from './services/VersionService';

/**
 * Main application component that handles authentication, user profile, and routing
 * 
 * @component App
 * @returns {JSX.Element} Rendered application
 */
function App() {
  // Use the auth context
  const { user, isAuthenticated, loading: authLoading, login: authLogin, logout: authLogout } = useAuth();
  
  // Default user profile (used as fallback if no user is authenticated)
  // eslint-disable-next-line no-unused-vars
  const defaultUser = {
    name: 'John Doe',
    email: 'john.doe@example.com',
    avatar: null, // Can be updated when user uploads an image
    status: 'online',
    role: 'User',
    statusMessage: 'Working on QuibiChat',
    bio: 'Software developer passionate about creating great user experiences.',
    location: 'San Francisco, CA',
    company: 'Tech Innovations Inc.',
    website: 'https://johndoe.dev',
    theme: 'light', // User preference for light/dark theme
    lastActive: new Date().toISOString(),
    joinedDate: '2023-01-15',
    preferences: {
      notifications: true,
      soundEnabled: true,
      enterToSend: true,
      showOnlineStatus: true
    }
  };

  // Check for demo mode from URL parameters
  const [demoMode, setDemoMode] = useState(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const demo = urlParams.get('demo');
    return demo; // Can be 'search', 'splash', or null
  });
  
  // Local state for UI loading
  const [loading, setLoading] = useState(true);
  const [showSplash, setShowSplash] = useState(true);
  const [showWhatsNew, setShowWhatsNew] = useState(false);
  // eslint-disable-next-line no-unused-vars
  const [appInitialized, setAppInitialized] = useState(false);
  const [authMode, setAuthMode] = useState('login'); // 'login' or 'register'
  const [darkMode, setDarkMode] = useState(() => {
    // Check if the user has a saved preference
    const savedPreference = localStorage.getItem('darkMode');
    if (savedPreference !== null) {
      return JSON.parse(savedPreference);
    }
    // Otherwise, use system preference
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  const [appVersion] = useState(APP_VERSION.version); // Application version from VersionService

  // Apply theme to document body
  useEffect(() => {
    if (darkMode) {
      document.body.classList.add('dark-theme');
    } else {
      document.body.classList.remove('dark-theme');
    }
    // Save preference to localStorage
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  // Initialize application
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // Show splash screen for at least 2 seconds
        const splashStartTime = Date.now();
        
        // Initialize Enhanced Connection Manager
        const connectionManager = getConnectionManager();
        // Connection manager is automatically initialized in constructor
        
        // Try to load user profile - this will merge with authenticated user data if available
        const savedProfile = loadUserProfile();
        
        // Check if this is the first time opening this version
        const isAppNewVersion = isNewVersion();
        
        // Save current version
        saveCurrentVersion();
        
        // Ensure splash screen is shown for at least 2 seconds
        const elapsedTime = Date.now() - splashStartTime;
        const minimumSplashTime = 2000; // 2 seconds
        
        if (elapsedTime < minimumSplashTime) {
          await new Promise(resolve => 
            setTimeout(resolve, minimumSplashTime - elapsedTime)
          );
        }
        
        // Show What's New modal if this is a new version
        if (isAppNewVersion) {
          // Wait a bit after splash screen before showing What's New
          setTimeout(() => {
            setShowWhatsNew(true);
          }, 1000);
        }
        
      } catch (error) {
        console.error('Error initializing app:', error);
      } finally {
        setLoading(false);
        setAppInitialized(true);
        // Hide splash screen
        setShowSplash(false);
      }
    };
    
    initializeApp();
  }, []); // Remove user dependency - app initialization should only happen once
  
  // Handle theme setting based on user preference
  useEffect(() => {
    const savedProfile = loadUserProfile();
    
    // Set theme based on user preference if available
    if (user) {
      if (user.theme === 'dark') {
        setDarkMode(true);
      } else if (user.theme === 'light') {
        setDarkMode(false);
      }
    } else if (savedProfile && savedProfile.theme) {
      // If only profile exists, use its theme preference
      if (savedProfile.theme === 'dark') {
        setDarkMode(true);
      } else if (savedProfile.theme === 'light') {
        setDarkMode(false);
      }
    }
  }, [user]); // This can depend on user since it's just theme setting
  
  // Initialize user presence tracking
  useEffect(() => {
    // Only start tracking if user is logged in
    if (user) {
      // Initialize presence tracking and get cleanup function
      const cleanupPresenceTracking = initPresenceTracking();
      
      // Return cleanup function for when component unmounts
      return cleanupPresenceTracking;
    }
  }, [user]);

  const handleLogin = (userData, token) => {
    // Use the auth context login
    authLogin(userData, token);
    // Update last active time when user logs in
    updateLastActive();
  };
  
  const handleLogout = () => {
    // Use the auth context logout
    authLogout();
  };
  
  /**
   * Handle theme toggle
   */
  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    
    // Update user profile with theme preference if user exists
    if (user) {
      handleUpdateUser({
        theme: newDarkMode ? 'dark' : 'light'
      });
    }
  };
  
  /**
   * Update user profile data
   * @param {Object} userData - Updated user data
   */
  const handleUpdateUser = (userData) => {
    // Log profile update activity
    logActivity(ACTIVITY_TYPES.PROFILE_UPDATE, { 
      userId: user?.id || 'anonymous',
      updatedFields: Object.keys(userData),
      appVersion: appVersion
    });
    
    // If theme preference is updated, apply it
    if (userData.theme) {
      setDarkMode(userData.theme === 'dark');
    }
    
    // Save to local storage
    saveUserProfile(userData);
  };

  // Alias for compatibility with AppHeader
  const handleProfileUpdate = handleUpdateUser;

  const switchToRegister = () => setAuthMode('register');
  const switchToLogin = () => setAuthMode('login');

  const renderAuthComponent = () => {
    if (authMode === 'login') {
      return <Login onLogin={handleLogin} switchToRegister={switchToRegister} />;
    } else {
      return <Register onRegisterSuccess={handleLogin} switchToLogin={switchToLogin} />;
    }
  };

  return (
    <div className={`App ${darkMode ? 'dark' : 'light'}`}>
      {demoMode === 'menu' ? (
        <DemoMenu />
      ) : demoMode === 'splash' ? (
        <DynamicSplashScreen 
          darkMode={darkMode} 
          appVersion={appVersion}
          onComplete={() => setDemoMode(null)}
        />
      ) : showSplash ? (
        <DynamicSplashScreen 
          darkMode={darkMode} 
          appVersion={appVersion}
          onComplete={() => setShowSplash(false)}
        />
      ) : (
        <ErrorBoundary showDetails={false}>
          <AppHeader 
            user={user}
            onProfileUpdate={handleProfileUpdate}
            onLogout={handleLogout}
            notifications={[]} // Add your notifications array here
            currentTheme={darkMode ? 'dark' : 'light'}
            onThemeToggle={() => setDarkMode(!darkMode)}
            onSearch={(query) => {
              // Handle global search functionality
              console.log('Search query:', query);
            }}
            appVersion={appVersion}
            activeUsers={user ? 1 : 0} // Simple active user count
            connectionStatus={<ConnectionStatus compact={true} />}
            quickActions={[
              {
                icon: (
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                ),
                label: 'Quick Stack',
                onClick: () => console.log('Quick Stack clicked')
              },
              {
                icon: (
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                ),
                label: 'New Chat',
                onClick: () => console.log('New Chat clicked')
              }
            ]}
          />
          
          <main className="app-content">
            {demoMode === 'search' ? (
              <SearchDemo />
            ) : loading ? (
              <div className="app-loading">
                <LoadingSpinner 
                  size="large" 
                  dark={darkMode} 
                  message="Loading QuibiChat..." 
                />
              </div>
            ) : (
              <Suspense fallback={
                <div className="app-loading">
                  <LoadingSpinner 
                    size="medium" 
                    dark={darkMode} 
                    message="Loading..." 
                  />
                </div>
              }>
                {isAuthenticated && user && !authLoading ? (
                  <ProChat 
                    user={user}
                    onLogout={handleLogout} 
                    onUpdateUser={handleUpdateUser}
                    darkMode={darkMode}
                    toggleDarkMode={toggleDarkMode}
                    appVersion={appVersion}
                  />
                ) : authLoading ? (
                  <div className="app-loading">
                    <LoadingSpinner 
                      size="medium" 
                      dark={darkMode} 
                      message="Authenticating..." 
                    />
                  </div>
                ) : renderAuthComponent()}
              </Suspense>
            )}
          </main>
          
          {/* Only show footer after user is logged in */}
          {isAuthenticated && user && (
            <AppFooter 
              appVersion={appVersion}
              darkMode={darkMode}
            />
          )}
          
          {/* What's New Modal */}
          <WhatsNewModal
            isOpen={showWhatsNew}
            onClose={() => setShowWhatsNew(false)}
            darkMode={darkMode}
            version={appVersion}
          />
        </ErrorBoundary>
      )}
    </div>
  );
}

export default App;
